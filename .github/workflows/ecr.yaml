name: Docker Build & Push to ECR

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
on:
  workflow_call:
    inputs:
      service_name:
        description: The ecs service name, which should also be the ecr repo name.
        required: true
        type: string
      task_name:
        description: The ecs task definition name, which mayor may not be the same as the service name.
        required: true
        type: string
      cluster_name:
        description: The ecs cluster name.
        default: ecs-ue2-gui-core
        required: false
        type: string
      working_directory:
        description: The working directory the runner uses
        default: '.'
        type: string

env:
  AWS_REGION: ${{ inputs.AWS_ECR_SERVER_REGION }}
  REGISTRY_URL: ${{ vars.AWS_ECR_SERVER_URL }}
  ECR_REPOSITORY: ${{ inputs.service_name }}
  ECS_SERVICE: ${{ inputs.service_name }}
  ECS_TASK_NAME: ${{ inputs.task_name }}
  ECS_CLUSTER: ${{ inputs.cluster_name }}
  WORK_DIR: ${{ inputs.working_directory }}
  # ECS_TASK_DEFINITION: ".aws/task-definition.json"
  # CONTAINER_NAME: MY_CONTAINER_NAME
  
jobs:
  build:
    name: Docker Build, Tag and Push to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ vars.AWS_ECR_MASTER_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECR_MASTER_SECRET }}
        aws-region: ${{ vars.AWS_ECR_SERVER_REGION }}
        soft_fail: true
        working_directory: ${{ inputs.working_directory }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
  # tfsec:
  #   name: Security Checks
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: TFSec
  #     uses: aquasecurity/tfsec-action@v1.0.0
  #     with:
  #       soft_fail: true
  #       working_directory: ${{ inputs.terraform_working_directory }}
  #       version: ${{ env.TFSEC_VERSION }}
        
  # checkov:
  #   name: Policy Checks
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Checkov
  #     uses: bridgecrewio/checkov-action@master
  #     with:
  #       quiet: false
  #       soft_fail: false
  #       directory: ${{ inputs.terraform_working_directory }}
  #       skip_check: CKV_TF_1
  #       framework: terraform
  #       output_format: sarif
  #       download_external_modules: false
  #       log_level: WARNING
        
  # terraform:
  #   needs: [tflint, tfsec, checkov]
  #   name: Terraform Validation
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Terraform - Setup
  #     uses: hashicorp/setup-terraform@v2
  #     with: 
  #       terraform_version: ${{ env.TFC_VERSION }}
  #       cli_config_credentials_hostname: ${{ secrets.TFC_ADDR }}
  #       cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

  #   - name: Terraform - Init
  #     working-directory: ${{ inputs.terraform_working_directory }}
  #     run: terraform init

  #   - name: Terraform - Validate
  #     working-directory: ${{ inputs.terraform_working_directory }}
  #     run: terraform validate -no-color
      
  #   - name: Terraform - Speculative Plan
  #     if: ${{ inputs.module_level == 4 }}
  #     working-directory: ${{ inputs.terraform_working_directory }}
  #     run: terraform plan

  # documentation:
  #   if: ${{ inputs.module_level != 4 }}
  #   name: Documentation
  #   needs: [tflint, tfsec, checkov]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Render Documentation
  #     uses: terraform-docs/gh-actions@main
  #     with:
  #       output-method: replace
  #       git-push: "true"
  #       working-dir: ${{ inputs.terraform_working_directory }}
